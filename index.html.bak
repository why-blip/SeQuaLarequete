<meta charset="utf-8">
<title>SQL Trainer</title>
<style>
.task_button {width:30px;border-style:solid;border-width:1px;border-color:black;text-align:center;color:black;}

a {text-decoration:none;color:black}

* {font-family:sans serif}
textarea {font-family:monospace}
</style>
<body onhashchange="begin()">
<h1>SQL Trainer</h1>
<table>
<tr valign=top><td width=700>
<div>
<h2>Tehtävä <span id="which"></span></h2>
<p id="task"></p>
<h2>Esimerkki</h2>
<div id="example"></div>
</fieldset>
<div id="model"></div>
<h2>Lähetä vastaus</h2>
Kysely:<br>
<textarea rows=5 style="width:100%" id=query></textarea>
<br><br>
<button id="submit" onclick="check();">Tarkasta</button>
<span id="message"></span>
<div id="verdict"></div>
</td><td width=20></td><td>
<div id="menu"></div>
</td></tr></table>
<hr>
<p align="right">
<img src="vanillajs.png">
<script src="dist/sql-wasm.js"></script>
<script src="mooc.js"></script>
<script>

function get(id) {
    return document.getElementById(id);
}

function sql_run(context,query,what) {
    config = {locateFile: filename => `dist/${filename}`};

    initSqlJs(config).then(function(SQL){
        var db = new SQL.Database();
        try {
            db.run(context);
        } catch(error) {
            alert("Virhe tehtävän määrittelyssä");
        }
        try {
            var result = db.exec(query);
            sql_result(result,what);
        } catch(error) {
            sql_error(error,what);
        }
    });
}

function render_table(data,name) {
    if (data.length == 0) {
        var table = "";
        table += "<i>"+name+"</i>";
        table += "<table border><tr><td>(taulu on tyhjä)</td></tr></table>";
        return table;
    }
    data = data[0];
    var table = "";
    table += "<i>"+name+"</i>";
    table += "<table border>";
    table += "<tr>";
    for (var i = 0; i < data.columns.length; i++) {
        table += "<th>"+data.columns[i]+"</th>";
    }
    table += "</tr>";
    for (var i = 0; i < data.values.length; i++) {
        table += "<tr>";
        for (var j = 0; j < data.values[i].length; j++) {
            table += "<td>"+data.values[i][j]+"</td>";
        }
        table += "</tr>";
    }
    table += "</table>";
    return table;
}

function render_tables(data) {
    var html = "";
    html += "<fieldset><legend><b>Taulut</b></legend>";
    html += "<table><tr valign=top>";
    for (var i = 0; i < data.length; i++) {
        if (i != 0) html += "<td width=20></td>";
        html += "<td>"+render_table(data[i],table_names[i])+"</td>";
    }
    html += "</tr></table>";
    html += "</fieldset>";
    return html;
}

function render_plain(data) {
    if (data.length == 0) return "";
    data = data[0];
    var lines = [];
    for (var i = 0; i < data.values.length; i++) {
        var line = "";
        for (var j = 0; j < data.values[i].length; j++) {
            if (j != 0) line += "|";
            line += data.values[i][j];
        }
        lines.push(line);
    }
    return lines;
}

var show_headers = false;

function render_result(data,title,header) {
    var html = "";
    html += "<fieldset><legend><b>"+title+"</b></legend>";
    html += "<table border>";
    if (header != undefined && show_headers) {
    	html += "<tr>";
	    for (var i = 0; i < header.length; i++) {
    		html += "<th>"+header[i]+"</th>";
	    }
    	html += "</tr>";
    }
    for (var i = 0; i < data.length; i++) {
        html += "<tr>";
        var parts = data[i].split("|");
        for (var j = 0; j < parts.length; j++ ){
            html += "<td>"+parts[j]+"</td>";
        }
        html += "</tr>";
    }
    html += "</table>";
    html += "</fieldset>";
    return html;
}

var strict;

function same(a,b) {
    if (a.length != b.length) return false;
    var c = [], d = [];
    for (var i = 0; i < a.length; i++) {
        c.push(a[i]);
        d.push(b[i]);
    }
    if (!strict) {
        c.sort(); d.sort();
    }
    for (var i = 0; i < a.length; i++) {
        if (c[i] != d[i]) return false;
    }
    return true;
}

var table_names;
var table_data;
var all_correct;

function sql_result(result,what) {
    if (what[0] == "example") {
        table_data[my_test].push(result);
        my_table++;
        if (my_table < tables.length) {
            process_task();
        } else {
            if (my_test == 0) {
                var html = "";
                html += render_tables(table_data[0]);
                html += "<br>";
                html += render_result(results[0],"Haluttu tulos");
                get("example").innerHTML = html;
            }
            my_table = 0;
            my_test++;
            if (my_test < tests.length) {
                process_task();
            } else {
                get("submit").disabled = false;
            }
        }
    }
    if (what[0] == "test") {
        var verdict = get("verdict");
        var plain = render_plain(result);
        var correct = same(results[what[1]],plain);
        if (!correct) all_correct = false;
        var message = correct ? "<font color=green>oikein</font>" : "<font color=red>väärin</font>";
        verdict.innerHTML += "<h2>Testi "+(what[1]+1)+" ("+message+")</h2>";
        verdict.innerHTML += render_tables(table_data[what[1]]);
        verdict.innerHTML += render_result(results[what[1]],"Haluttu tulos");
        var columns = result[0] == undefined ? undefined : result[0].columns;
        verdict.innerHTML += render_result(plain,"Kyselysi tulos",columns);
        my_test++;
        if (my_test < tests.length) {
            check_test();
        } else {
            var message = all_correct ? "<font color=green>Kyselysi toimii oikein</font>" : "<font color=red>Kyselysi toimii väärin</font>";
            get("message").innerHTML = message;
            if (mooc_status == 1) {
	            quizzes_send(my_task,get("query").value,all_correct,process_result);
	    	}
        }
    }
}

function process_result() {
    quizzes_status(process_status);
}

function sql_error(error,what) {
    get("message").innerHTML = "<font color=red>Kyselysi on virheellinen</font>";
    get("verdict").innerHTML = "<br>"+error;
}

var tables, tests, results;

function parse_task(data) {
    var lines = data.split("\n");
    var mode = 0;
    var task = get("task");
    task.innerHTML = "";
    tables = [];
    table_names = [];
    tests = [];
    results = [];
    strict = false;
    for (var i = 0; i < lines.length; i++) {
        var line = lines[i].trim();
        if (line == "TASK") {
            mode = 1;
        } else if (line == "TABLES") {
            mode = 2;
        } else if (line == "TEST") {
            mode = 3;
            tests.push([]);
            results.push([]);
        } else if (line == "RESULT") {
            mode = 4;
        } else if (line == "STRICT") {
            strict = true;
        } else if (line == "") {
        } else {
            if (mode == 1) {
                task.innerHTML += line+" ";
            } else if (mode == 2) {
                tables.push(line);
            } else if (mode == 3) {
                tests[tests.length-1].push(line);
            } else if (mode == 4) {
                results[tests.length-1].push(line);
            }
        }
    }
}

function read_task(file) {
    get("submit").disabled = true;
    var x = new XMLHttpRequest();
    x.onreadystatechange = function() {
        if (x.readyState == 4 && x.status == 200) {
            parse_task(x.responseText);
            my_test = my_table = 0;
            process_task();
        }
    }
    x.open("GET",file+"?"+(new Date().getTime()));
    x.send();
}

var my_test, my_table;

function process_task() {
    if (my_test == 0 && my_table == 0) table_data = [];
    if (my_table == 0) table_data.push([]);
    var context = "";
    for (var i = 0; i < tables.length; i++) {
        context += tables[i];
    }
    for (var i = 0; i < tests[my_test].length; i++) {
        context += tests[my_test][i];
    }
    var parts = tables[my_table].split(" ");
    var table = parts[2];
    table_names.push(table);
    sql_run(context,"SELECT * FROM "+table+";",["example",my_table]);
}

function check_test() {
    var context = "";
    for (var i = 0; i < tables.length; i++) {
        context += tables[i];
    }
    for (var i = 0; i < tests[my_test].length; i++) {
        context += tests[my_test][i];
    }
    var query = get("query").value;
    if (query.trim() == "") return;
    sql_run(context,query,["test",my_test]);
}

function check() {
    get("verdict").innerHTML = "";
    get("message").innerHTML = "";
    my_test = 0;
    all_correct = true;
    check_test();
}

var my_task = 0;

function start_login() {
    mooc_login(get("username").value,get("password").value,end_login);
}

var task_status = [];
var status_ready = 0;


function process_status(status) {
    for (var i = 1; i <= 100; i++) {
        task_status[i] = parseInt(status[i-1]);
    }
    status_ready = 2;
    create_menu();
}

function end_login(result) {
    if (mooc_status == 2) {
        alert("Tunnus tai salasana ei ole oikea");
        mooc_status = 0;
    }
    quizzes_status(process_status);
}

function check_submit(event) {
    if (event.keyCode == 13) start_login();
}

function create_menu() {
	if (mooc_status == 1 && status_ready == 0) {
		status_ready = 1;
        quizzes_status(process_status);		
	}
    var html = "";
    html += "<h2>Tehtävän valinta</h2>";
    html += "<table>";
    var count = 0;
    for (var i = 1; i <= 100; i++) {
        if (i%10 == 1) html += "<tr>";
        var link = i == my_task ? "<b>"+i+"</b>" : i;
        var color = "white";
        if (mooc_status == 1 && status_ready == 2 && task_status[i] == 1) {
 			color = "lightgreen";
	        count++;
        }
        html += "<td><div class=\"task_button\" style=\"cursor:pointer;background:"+color+"\" onclick=\"show_task("+i+")\">"+link+"</div></td>";
        if (i%10 == 0) html += "</tr>";
    }
    html += "</table>";
    if (mooc_status == 1) {
        html += "<br>Olet ratkonut "+count+"/100 tehtävää.";
    }
    html += "<h2>Kirjautuminen</h2>";
    if (mooc_status != 1) {
        html += "<p>Kirjaudu sisään mooc.fi-tunnuksella:</p>";
        html += "Tunnus:<br><input onkeyup=\"check_submit(event)\" type=text id=\"username\"><br>";
        html += "Salasana:<br><input onkeyup=\"check_submit(event)\" type=password id=\"password\"><br>";
        html += "<br><button onclick=\"start_login()\">Kirjaudu sisään</button>";
    } else {
        html += "<p>Olet kirjautunut sisään.</p>";
        html += "<button onclick=\"mooc_logout(create_menu)\">Kirjaudu ulos</button>";
    }
    get("menu").innerHTML = html;
    quizzes_answer(my_task,show_answer);
    quizzes_model(my_task,show_model);
}

function show_answer(data) {
	get("query").value = data;
}

var my_model;

function show_model(data) {
    if (data == "") {
        get("model").innerHTML = "";
    } else {
        data = data.replace("<","&lt;");
        data = data.replace(">","&gt;");
        my_model = data;
        get("model").innerHTML = "<br><span style=\"cursor:pointer\" onclick=\"real_model();\"><u>Näytä mallivastaus</u></span>";
    }
}

function real_model() {
    get("model").innerHTML = "<br><textarea readonly style=\"width:100%\" rows=3>"+my_model+"</textarea>";
    return false;
}

function show_task(task) {
    if (my_task == task) return;
    my_task = task;
    get("query").value = "";
    get("task").innerHTML = "";
    get("example").innerHTML = "";
    get("message").innerHTML = "";
    get("verdict").innerHTML = "";
    get("which").innerHTML = task;
    read_task("tasks/task"+task+".txt");
    create_menu();
    window.location.hash = task;
    if (mooc_status == 1) {
    	quizzes_answer(task,show_answer);
    }
}

function begin() {
    var task = 1;
    if (window.location.hash != "") {
        task = parseInt(window.location.hash.substring(1));
        if (!(task >= 1 && task <= 100)) return;
    }
    show_task(task);
}

begin();

</script>
